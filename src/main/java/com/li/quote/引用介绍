强引用、软引用、弱引用、虚引用分别是什么？
     强引用： 当内存不足时，JVM开始垃圾回收，对于强引用的对象，就算是出现了OOM也不会对该对象进行回收，死都不回收
  强引用是我们最常见的普通对象引用，只要还有强引用指向一个对象，就能表名对象还“活着”，垃圾收集器就不会碰这种对象。在
  Java中最常见的就是强引用，把一个对象赋给一个引用变量，这个引用变量就是一个强引用。当一个对象被强引用变量引用时，他处于
  可达状态。它是不可能被垃圾回收机制进行回收的，即使该对象以后永远都不会被用到JVM也不会回收。因此强引用是Java内存泄露的
  主要原因之一。
      对于一个普通的对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式的将相应（强）引用赋值为null，一般认为就是
  可以被垃圾收集了（当然具体回收时机还是要看垃圾收集策略）
     软引用：软引用是一种相对强引用弱化了一些的引用，需要用java.lang.ref.SoftReference类来实现，可以让对象豁免一些垃圾收集
  对于只有软引用的对象来说：当系统内存充足时它不会回收 当系统内存不足是它会被回收
     软引用通常在对内存敏感的程序中，比如说：高速缓存就是用到的软引用，内存够用的时候就保留，不够用就回收。

     应用场景：假设有一个应用需要读取大量的本地图片：
       * 如果每一次读取图片都是从硬盘读取则会严重影响性能
       * 如果一次性去不加载到内存中又可能造成内存溢出
     此时使用软引用可以解决这个问题：
        设计思路：用一个HashMap来保存图片的路径和相应图片对象的关联的软应用之间的映射关系，在内存不足时，JVM会自动
     回收这些缓存的图片对象所占用的空间，从而有效避免OOM的问题
     虚引用：就是形同虚设，与其他几种应用都不同，虚引用并不会决定对象的声明周期，如果有一个对象仅持有虚引用，那么
  它就和任何引用一样，在任何时候都可能被垃圾回收，它不能单独使用也不能通过他访问对象，虚引用必须和引用队列联合使用
     虚引用的主要作用是跟踪对象被垃回收的状态，仅仅提供了一种确保对象被finalize以后，做某些事情的机制。PhantomReference
  的get方法总是返回null，因此无法访问对应的引用对象。其意义在于说明一个对象已经进入finalization阶段，可以被gc回收用来
  实现比finalization机制更灵活的回收操作。
     换句话说，设置虚引用关联的唯一目的，就是在这个对象被垃圾回收的时候收到一个系统通知或者后续添加进一步的处理。
     Java技术允许使用finalize()方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。